Advanced Topics Neural Networks Coding Standards 2025-2026

Comments
Block Comments
Block comments will have the following structure, with a leading asterisk, or a leading
space followed by an asterisk, on each line. What comes after that is up to you. Block
comments should NOT be indented. Any comment on its own line or that spans multiple
lines should be treated as a block comment.
/*
* Block comment text starts here…
* and more here…
*/

or
/*
* Block comment text starts here…
* and more here…
*/
and NEVER
// Block comments should never be
// a collection of in-line comments.

Header Comment
All files will contain a file header block comment that contains, at a minimum:
Name of the author
Date of Creation
Functional Description of the Module

In-line Comments
In-line comments need to be in-line with the code. In-line comments on their own line
should be treated as block comments. In-line comments that run on multiple lines or are
in close proximity should line up, for example
…
for (i = 0; i < 42; ++i)
// Iterate over the meaning of existence
{
Count += bobsYourUncle();
// Count number of uncles named Bob
j *= judysYourAunte(Count); // Not sure what Judy does with this…
}

Functions, Methods and Classes
All functions, methods and classes will have a block comment that describes the
operation and limitations of the function. Special conditions, such as argument value
requirements, must be included in this comment. It need not follow javadocs. There
should never be a space between the method name and the left parenthesis. Doing so
makes the method look like a Java flow construct.

Page 1 of 7

012209.30

Advanced Topics Neural Networks Coding Standards 2025-2026

Functions, Methods, Classes, if, do, while, switch, etc.
The closing curly-bracket in any code block should have an in-line comment that repeats
the construct for the block (just echo the defining line for the block). This comment is
required if the block is longer than ten (10) lines, otherwise it is optional. The closing
brace should be follow by a space and then the comment and should not be aligned with
other in-line comments. Example:
for (i = 0; i < iLimit; ++i)
{
while (itemCount > 0)
{
… A fairly long block of code is in here
…
…
…
…
…
…
… and why are we in here in the first place?
… Oh yes, look at the next lines!
} // while (itemCount > 0)
} // for (i = 0; i < iLimit; ++i)

Examples of Poor Commenting
What?????
Note that the physical a[][] array is the transverse of the design visualization, with instead
the indexing method corresponding.
Heapify the heap so the heaps a heap
[in the context of the heapify() method in the Heap class]

Could you say that again?
The number of rows below the input rows that the rowsRow row is.

You don't say?
calculateConvenience();

// Calculates the convenience.

The Main class of the project that contains the main method
[in the context of the Main class]

Formatting
Line Length
The code should be displayable and not result in word-wrapping problems! Limiting the
line length to 132 characters is generally a good idea.

Page 2 of 7

012209.30

Advanced Topics Neural Networks Coding Standards 2025-2026

Naming Conventions
Functions, methods and variables
Functions, methods and variables shall start with a lower case letter and can then be a
mixture of lower and upper case letters, numbers and symbols. Exceptions can be made
when violating this convention allows variable names to be directly mapped to the
notation in an external design document and in the case of single letter variables such as
N, K, etc... . The use of the underscore character is to be avoided, except in those cases
where it increases readability or maps into structures in other languages such as C. The
variable names i, j, and k should only be used as loop index counters unless the use has
some physical meaning such as i for current or k for a spring constant. Names should be
meaningful and should indicate the purpose of the function, variable or class. Cute
meaningless names such as burgers and wombats that have nothing to do with either
burgers or wombats are not allowed (i.e., they could be acceptable depending on the
context). Use of the letters l (lowercase L) and O (uppercase o) should never be used
alone because they look too much like one and zero. Examples of context independent
acceptable variable names:
int ival, myInteger, yetAnotherVariableName, n, i, j, K;
int bmpFileHeader_bfType, llama, MY_CONSTANT;

Constants
Constants shall be in upper case letters. Constants are any value that is set once and then
never changes. Exceptions can be made for single letter variables such as N, K, etc... The
underscore character should be used to improve readability (e.g.,
SECONDS_PER_DAY). Constants can be declared as non-final variables and set
elsewhere in the code as long as they are set once with a hard coded value visible in the
source code.

Magic Numbers and Strings
Special values (aka Magic Numbers) shall not be used in the code base unless they are
defined as constants and are clearly documented. Magic strings are similar in nature, but
are not as severe as they are usually easy to interpret. Magic numbers in your code will
cost you. Values such as 0 and 1 are not generally considered magic, but can be
depending upon the usage. Examples of magic numbers are:
for (i = 0; i < 1492; ++i) ...
if (llama != 10000) …
y = 1054 * x;
weight[1, k] += deltaWeight; // The 1 is indeed magic here

Page 3 of 7

012209.30

Advanced Topics Neural Networks Coding Standards 2025-2026

Classes
Classes shall start with an upper case letter and can then be a mixture of lower and upper
case letters, numbers and symbols. The use of the underscore character is to be avoided,
except in those cases where it increases readability. Example:
public class Bicycle
{
… All the stuff you find in a class
} // public class Bicycle

Indenting, Alignment and White Space
Tabs shall not be used for indenting in order to facilitate portability. The standard indent
shall be three (3) spaces. Tabs in your code will cost you your A+, or worse if they are
pervasive. The curly-brackets shall appear below class, function and method names as
shown below:
void myFunctionThatDoesNothing()
{
return;
}

with no extra lines between the construct and the opening brace. Do not put a blank line
after the opening brace or before the closing brace. The same convention shall be used for
while, for, if and case constructs (in other words, everything). For example
if (a == 0)
{
int a = 0;
… code in here …
}

return;

is acceptable while
if (a == 0)
{

<--- No blank line allowed here
<--- or here

int a = 0;
… code in here …
return;

<--- or here

} // if (a == 0)

is not.

Page 4 of 7

012209.30

Advanced Topics Neural Networks Coding Standards 2025-2026

More on White Space
White space is to be used to increase readability. Spaces should be used in conditional
and loop statements to improved readability. Blank lines should precede and follow inline declarations and the first line of executable code after the initial block of
declarations. It should also be used to distinguish between different functional blocks
(initializations, declarations, loops, etc...). Exceptions can be made for small modules and
accumulator constructs. For example:
static final int CENTURY = 100;
int i, j, k, sum;
double x, y, z;
x = 0.;
int[] a = new int[CENTURY];

// A 100 year array

sum = 0.0;
for (i = 0; i < CENTURY; ++i) // Fill the array with pointless stuff
{
a[i] = i;
sum += i;
}

is much more readable than
static final int CENTURY=100;
int i,j,k;
double x,y,z;
x=0.;
int[] a=new int[CENTURY]; // A 100 year array
sum = 0.0;
for(i=0;i<CENTURY;++i)
// Fill the array with pointless stuff
{
a[i]=i;
sum += i;
}

Mixed Mode Arithmetic
Never mix arithmetic types when doing a calculation. The number 1 is some kind of
integer. The number 1.0 is some kind of floating point value. Consider the following
calculations: “A = 1/2 * B” and “A = 1.0/2.0 * B”. What will be the results?
The outcome depends on the types of A and B and how the compiler handles arithmetic
precedence as well as automatic casting (never assume that the compiler or interpreter
will follow the rules you learned in elementary school). The first example will likely be
zero in many cases, even if the variable B is not an integer! Unless you wrote the
compiler, you really don't know. How do you fix it when dealing with variables? You
will need to use type casting to make all the variables the same data type. For example
when dividing a double by an integer, and you want the result to be a double, you would
type case the integer to a double as shown below:

Page 5 of 7

012209.30

Advanced Topics Neural Networks Coding Standards 2025-2026
double average(double value, int num)
{
return(value / (double)num); // Simple example of type casting
}

Flow Control
Flow control constructs such as if, for, while, etc... shall have the opening brace on
the line just below the construct. There shall be a space between the construct and the left
parenthesis and following the semicolons. Additional spaces should also be used between
equal signs and tests. For example:
for (j = 0; j < 10; ++j) // yes 10 is a magic number here
{
/*
** The above is acceptable for loop formatting
*/
}

and not
for(j=0;j<10;++j) // and 10 is still magic
{
/*
** The above is NOT acceptable
*/
}

Simple statements can be on a single line:
if (x > xMax) xMax = x;

The break statement shall ONLY be used within a switch/case construct. It shall
NEVER be used to exit a loop construct. The continue statement can be used if it
improves readability such as when the entire body of the loop would be enclosed in an ifstatement.
FOR and WHILE Loops: The iterator (the loop counter) in a for-loop shall not be
modified within the body of the loop. Additionally, a for-loop shall not be used to
simulate a while-construct. The for-loop construct shall always execute a predetermined
fixed number of iterations.
All functions and methods shall have a return statement as their last executable line.
There is an exception for void methods in Java, where the statement is optional. In
general, there shall be one AND ONLY ONE return statement in a function or method.
Note that exceptions can be made if the code is easier to understand if it uses multiple
return statements. Exceptions can be made for very small functions, but only if clarity is
not sacrificed. For example:

Page 6 of 7

012209.30

Advanced Topics Neural Networks Coding Standards 2025-2026
/*
* sign function:
* returns -1 if x < 0, 0 if x = 0, 1 if x > 0
*/
int sign(int x)
{
if (x < 0) return(-1); else if (x > 0) return (1); else return(0);
}

is at least as readable as…
int sign(int x)
{
int iRet = 0; // return value default is zero
if (x < 0)
iRet = -1;
else if (x > 0)
iRet = 1;
return(iRet);
}

Note that the following “clever” code using the ternary operator is NOT as readable as
the above code listings:
int sign(int x)
{
(x < 0) ? return(-1) : (x > 0) ? return(1) : return(0);
}

Page 7 of 7

012209.30

